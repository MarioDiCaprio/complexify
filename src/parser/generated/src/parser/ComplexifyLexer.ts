// Generated from src/parser/Complexify.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ComplexifyLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly NUMBER = 2;
	public static readonly CHAR = 3;
	public static readonly ESCAPE = 4;
	public static readonly PLUS = 5;
	public static readonly MINUS = 6;
	public static readonly TIMES = 7;
	public static readonly DIVIDE = 8;
	public static readonly FRAC = 9;
	public static readonly POW = 10;
	public static readonly SQRT = 11;
	public static readonly LEFT = 12;
	public static readonly RIGHT = 13;
	public static readonly LEFT_BRACE = 14;
	public static readonly RIGHT_BRACE = 15;
	public static readonly COMA = 16;
	public static readonly SEMICOLON = 17;
	public static readonly EQUALS = 18;
	public static readonly OPERATORNAME = 19;
	public static readonly PLOTTED_FUNC = 20;
	public static readonly I = 21;
	public static readonly E = 22;
	public static readonly PI = 23;
	public static readonly SIN = 24;
	public static readonly COS = 25;
	public static readonly TAN = 26;
	public static readonly COT = 27;
	public static readonly SEC = 28;
	public static readonly CSC = 29;
	public static readonly SINH = 30;
	public static readonly COSH = 31;
	public static readonly TANH = 32;
	public static readonly LOG = 33;
	public static readonly LN = 34;
	public static readonly RE = 35;
	public static readonly IM = 36;
	public static readonly CIS = 37;
	public static readonly WS = 38;
	public static readonly LATEX_WS = 39;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "NUMBER", "CHAR", "ESCAPE", "PLUS", "MINUS", "TIMES", "DIVIDE", 
		"FRAC", "POW", "SQRT", "LEFT", "RIGHT", "LEFT_BRACE", "RIGHT_BRACE", "COMA", 
		"SEMICOLON", "EQUALS", "OPERATORNAME", "PLOTTED_FUNC", "I", "E", "PI", 
		"SIN", "COS", "TAN", "COT", "SEC", "CSC", "SINH", "COSH", "TANH", "LOG", 
		"LN", "RE", "IM", "CIS", "WS", "LATEX_WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'operatorname'", undefined, undefined, "'\\'", "'+'", "'-'", 
		undefined, "'/'", undefined, "'^'", undefined, undefined, undefined, "'{'", 
		"'}'", "','", "';'", "'='", undefined, "'@'", "'i'", "'e'", undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'cis'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, "NUMBER", "CHAR", "ESCAPE", "PLUS", "MINUS", "TIMES", 
		"DIVIDE", "FRAC", "POW", "SQRT", "LEFT", "RIGHT", "LEFT_BRACE", "RIGHT_BRACE", 
		"COMA", "SEMICOLON", "EQUALS", "OPERATORNAME", "PLOTTED_FUNC", "I", "E", 
		"PI", "SIN", "COS", "TAN", "COT", "SEC", "CSC", "SINH", "COSH", "TANH", 
		"LOG", "LN", "RE", "IM", "CIS", "WS", "LATEX_WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ComplexifyLexer._LITERAL_NAMES, ComplexifyLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ComplexifyLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ComplexifyLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Complexify.g4"; }

	// @Override
	public get ruleNames(): string[] { return ComplexifyLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ComplexifyLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ComplexifyLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ComplexifyLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02)\u0112\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x03\x06\x03`\n\x03\r\x03\x0E\x03a\x03\x03\x03\x03\x05" +
		"\x03f\n\x03\x05\x03h\n\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\r\x90\n\r" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x05\x0E\x9B\n\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03" +
		"\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03!\x03\"" +
		"\x03\"\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03%" +
		"\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03\'\x06\'\u0105\n\'\r\'\x0E\'\u0106" +
		"\x03\'\x03\'\x03(\x03(\x06(\u010D\n(\r(\x0E(\u010E\x03(\x03(\x02\x02\x02" +
		")\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
		"\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F" +
		"\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16" +
		"+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E" +
		";\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02" +
		")\x03\x02\x04\x04\x02C\\c|\x05\x02\v\f\x0E\x0F\"\"\x02\u0118\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
		"\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03" +
		"\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02" +
		"\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02" +
		"=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02" +
		"\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02" +
		"\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x03Q\x03" +
		"\x02\x02\x02\x05_\x03\x02\x02\x02\x07i\x03\x02\x02\x02\tk\x03\x02\x02" +
		"\x02\vm\x03\x02\x02\x02\ro\x03\x02\x02\x02\x0Fq\x03\x02\x02\x02\x11w\x03" +
		"\x02\x02\x02\x13y\x03\x02\x02\x02\x15\x7F\x03\x02\x02\x02\x17\x81\x03" +
		"\x02\x02\x02\x19\x8F\x03\x02\x02\x02\x1B\x9A\x03\x02\x02\x02\x1D\x9C\x03" +
		"\x02\x02\x02\x1F\x9E\x03\x02\x02\x02!\xA0\x03\x02\x02\x02#\xA2\x03\x02" +
		"\x02\x02%\xA4\x03\x02\x02\x02\'\xA6\x03\x02\x02\x02)\xB4\x03\x02\x02\x02" +
		"+\xB6\x03\x02\x02\x02-\xB8\x03\x02\x02\x02/\xBA\x03\x02\x02\x021\xBE\x03" +
		"\x02\x02\x023\xC3\x03\x02\x02\x025\xC8\x03\x02\x02\x027\xCD\x03\x02\x02" +
		"\x029\xD2\x03\x02\x02\x02;\xD7\x03\x02\x02\x02=\xDC\x03\x02\x02\x02?\xE2" +
		"\x03\x02\x02\x02A\xE8\x03\x02\x02\x02C\xEE\x03\x02\x02\x02E\xF3\x03\x02" +
		"\x02\x02G\xF7\x03\x02\x02\x02I\xFB\x03\x02\x02\x02K\xFF\x03\x02\x02\x02" +
		"M\u0104\x03\x02\x02\x02O\u010C\x03\x02\x02\x02QR\x07q\x02\x02RS\x07r\x02" +
		"\x02ST\x07g\x02\x02TU\x07t\x02\x02UV\x07c\x02\x02VW\x07v\x02\x02WX\x07" +
		"q\x02\x02XY\x07t\x02\x02YZ\x07p\x02\x02Z[\x07c\x02\x02[\\\x07o\x02\x02" +
		"\\]\x07g\x02\x02]\x04\x03\x02\x02\x02^`\x042;\x02_^\x03\x02\x02\x02`a" +
		"\x03\x02\x02\x02a_\x03\x02\x02\x02ab\x03\x02\x02\x02bg\x03\x02\x02\x02" +
		"ce\x070\x02\x02df\x042;\x02ed\x03\x02\x02\x02ef\x03\x02\x02\x02fh\x03" +
		"\x02\x02\x02gc\x03\x02\x02\x02gh\x03\x02\x02\x02h\x06\x03\x02\x02\x02" +
		"ij\t\x02\x02\x02j\b\x03\x02\x02\x02kl\x07^\x02\x02l\n\x03\x02\x02\x02" +
		"mn\x07-\x02\x02n\f\x03\x02\x02\x02op\x07/\x02\x02p\x0E\x03\x02\x02\x02" +
		"qr\x05\t\x05\x02rs\x07e\x02\x02st\x07f\x02\x02tu\x07q\x02\x02uv\x07v\x02" +
		"\x02v\x10\x03\x02\x02\x02wx\x071\x02\x02x\x12\x03\x02\x02\x02yz\x05\t" +
		"\x05\x02z{\x07h\x02\x02{|\x07t\x02\x02|}\x07c\x02\x02}~\x07e\x02\x02~" +
		"\x14\x03\x02\x02\x02\x7F\x80\x07`\x02\x02\x80\x16\x03\x02\x02\x02\x81" +
		"\x82\x05\t\x05\x02\x82\x83\x07u\x02\x02\x83\x84\x07s\x02\x02\x84\x85\x07" +
		"t\x02\x02\x85\x86\x07v\x02\x02\x86\x18\x03\x02\x02\x02\x87\x90\x07*\x02" +
		"\x02\x88\x89\x05\t\x05\x02\x89\x8A\x07n\x02\x02\x8A\x8B\x07g\x02\x02\x8B" +
		"\x8C\x07h\x02\x02\x8C\x8D\x07v\x02\x02\x8D\x8E\x07*\x02\x02\x8E\x90\x03" +
		"\x02\x02\x02\x8F\x87\x03\x02\x02\x02\x8F\x88\x03\x02\x02\x02\x90\x1A\x03" +
		"\x02\x02\x02\x91\x9B\x07+\x02\x02\x92\x93\x05\t\x05\x02\x93\x94\x07t\x02" +
		"\x02\x94\x95\x07k\x02\x02\x95\x96\x07i\x02\x02\x96\x97\x07j\x02\x02\x97" +
		"\x98\x07v\x02\x02\x98\x99\x07+\x02\x02\x99\x9B\x03\x02\x02\x02\x9A\x91" +
		"\x03\x02\x02\x02\x9A\x92\x03\x02\x02\x02\x9B\x1C\x03\x02\x02\x02\x9C\x9D" +
		"\x07}\x02\x02\x9D\x1E\x03\x02\x02\x02\x9E\x9F\x07\x7F\x02\x02\x9F \x03" +
		"\x02\x02\x02\xA0\xA1\x07.\x02\x02\xA1\"\x03\x02\x02\x02\xA2\xA3\x07=\x02" +
		"\x02\xA3$\x03\x02\x02\x02\xA4\xA5\x07?\x02\x02\xA5&\x03\x02\x02\x02\xA6" +
		"\xA7\x05\t\x05\x02\xA7\xA8\x07q\x02\x02\xA8\xA9\x07r\x02\x02\xA9\xAA\x07" +
		"g\x02\x02\xAA\xAB\x07t\x02\x02\xAB\xAC\x07c\x02\x02\xAC\xAD\x07v\x02\x02" +
		"\xAD\xAE\x07q\x02\x02\xAE\xAF\x07t\x02\x02\xAF\xB0\x07p\x02\x02\xB0\xB1" +
		"\x07c\x02\x02\xB1\xB2\x07o\x02\x02\xB2\xB3\x07g\x02\x02\xB3(\x03\x02\x02" +
		"\x02\xB4\xB5\x07B\x02\x02\xB5*\x03\x02\x02\x02\xB6\xB7\x07k\x02\x02\xB7" +
		",\x03\x02\x02\x02\xB8\xB9\x07g\x02\x02\xB9.\x03\x02\x02\x02\xBA\xBB\x05" +
		"\t\x05\x02\xBB\xBC\x07r\x02\x02\xBC\xBD\x07k\x02\x02\xBD0\x03\x02\x02" +
		"\x02\xBE\xBF\x05\t\x05\x02\xBF\xC0\x07u\x02\x02\xC0\xC1\x07k\x02\x02\xC1" +
		"\xC2\x07p\x02\x02\xC22\x03\x02\x02\x02\xC3\xC4\x05\t\x05\x02\xC4\xC5\x07" +
		"e\x02\x02\xC5\xC6\x07q\x02\x02\xC6\xC7\x07u\x02\x02\xC74\x03\x02\x02\x02" +
		"\xC8\xC9\x05\t\x05\x02\xC9\xCA\x07v\x02\x02\xCA\xCB\x07c\x02\x02\xCB\xCC" +
		"\x07p\x02\x02\xCC6\x03\x02\x02\x02\xCD\xCE\x05\t\x05\x02\xCE\xCF\x07e" +
		"\x02\x02\xCF\xD0\x07q\x02\x02\xD0\xD1\x07v\x02\x02\xD18\x03\x02\x02\x02" +
		"\xD2\xD3\x05\t\x05\x02\xD3\xD4\x07u\x02\x02\xD4\xD5\x07g\x02\x02\xD5\xD6" +
		"\x07e\x02\x02\xD6:\x03\x02\x02\x02\xD7\xD8\x05\t\x05\x02\xD8\xD9\x07e" +
		"\x02\x02\xD9\xDA\x07u\x02\x02\xDA\xDB\x07e\x02\x02\xDB<\x03\x02\x02\x02" +
		"\xDC\xDD\x05\t\x05\x02\xDD\xDE\x07u\x02\x02\xDE\xDF\x07k\x02\x02\xDF\xE0" +
		"\x07p\x02\x02\xE0\xE1\x07j\x02\x02\xE1>\x03\x02\x02\x02\xE2\xE3\x05\t" +
		"\x05\x02\xE3\xE4\x07e\x02\x02\xE4\xE5\x07q\x02\x02\xE5\xE6\x07u\x02\x02" +
		"\xE6\xE7\x07j\x02\x02\xE7@\x03\x02\x02\x02\xE8\xE9\x05\t\x05\x02\xE9\xEA" +
		"\x07v\x02\x02\xEA\xEB\x07c\x02\x02\xEB\xEC\x07p\x02\x02\xEC\xED\x07j\x02" +
		"\x02\xEDB\x03\x02\x02\x02\xEE\xEF\x05\t\x05\x02\xEF\xF0\x07n\x02\x02\xF0" +
		"\xF1\x07q\x02\x02\xF1\xF2\x07i\x02\x02\xF2D\x03\x02\x02\x02\xF3\xF4\x05" +
		"\t\x05\x02\xF4\xF5\x07n\x02\x02\xF5\xF6\x07p\x02\x02\xF6F\x03\x02\x02" +
		"\x02\xF7\xF8\x05\t\x05\x02\xF8\xF9\x07T\x02\x02\xF9\xFA\x07g\x02\x02\xFA" +
		"H\x03\x02\x02\x02\xFB\xFC\x05\t\x05\x02\xFC\xFD\x07K\x02\x02\xFD\xFE\x07" +
		"O\x02\x02\xFEJ\x03\x02\x02\x02\xFF\u0100\x07e\x02\x02\u0100\u0101\x07" +
		"k\x02\x02\u0101\u0102\x07u\x02\x02\u0102L\x03\x02\x02\x02\u0103\u0105" +
		"\t\x03\x02\x02\u0104\u0103\x03\x02\x02\x02\u0105\u0106\x03\x02\x02\x02" +
		"\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u0108\x03" +
		"\x02\x02\x02\u0108\u0109\b\'\x02\x02\u0109N\x03\x02\x02\x02\u010A\u010B" +
		"\x07^\x02\x02\u010B\u010D\x07\"\x02\x02\u010C\u010A\x03\x02\x02\x02\u010D" +
		"\u010E\x03\x02\x02\x02\u010E\u010C\x03\x02\x02\x02\u010E\u010F\x03\x02" +
		"\x02\x02\u010F\u0110\x03\x02\x02\x02\u0110\u0111\b(\x02\x02\u0111P\x03" +
		"\x02\x02\x02\n\x02aeg\x8F\x9A\u0106\u010E\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ComplexifyLexer.__ATN) {
			ComplexifyLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ComplexifyLexer._serializedATN));
		}

		return ComplexifyLexer.__ATN;
	}

}

